name: CD-Deploy
on:
  push:
    branches:
      - 'develop'

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Configure AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      # Setup Terraform
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # Define the infrastructure
      - name: TF plan
        id: tf-plan
        working-directory: 'infrastructure'
        run: |
          terraform init -backend-config="key=mlops-project.tfstate" --reconfigure && terraform plan --var-file=terraform.tfvars

      # Apply Terraform configurations
      - name: Terraform Apply
        id: tf-apply
        working-directory: 'infrastructure'
        run: |
          terraform apply -auto-approve -var-file=terraform.tfvars

          mlflow_db_endpoint=$(terraform output mlflow_db_endpoint)
          mlflow_db_name=$(terraform output mlflow_database_name)
          artifact_bucket_name=$(terraform output -raw s3_bucket_name)
          ecr_repo_uri=$(terraform output repository_url)
          ec2_public_ip=$(terraform output ec2_instance_public_ip)
          ec2_private_key_path_encoded=$(echo "$(terraform output ec2_instance_private_key_path)" | base64 -w 0) 

          echo "Terraform Outputs:"
          echo "mlflow_db_endpoint=$mlflow_db_endpoint"
          echo "mlflow_db_name=$mlflow_db_name"
          echo "artifact_bucket_name=$artifact_bucket_name"
          echo "::add-mask::$(terraform output -raw mlflow_database_credentials | jq -r '.username')"
          echo "::add-mask::$(terraform output -raw mlflow_database_credentials | jq -r '.password')"
          echo "ecr_repo_uri=$ecr_repo_uri"
          echo "ec2_public_ip=$ec2_public_ip"

          echo "MLFLOW_DB_ENDPOINT=$mlflow_db_endpoint" >> "$GITHUB_ENV"
          echo "MLFLOW_DB_NAME=$mlflow_db_name" >> "$GITHUB_ENV"
          echo "MLFLOW_DB_USERNAME=$(terraform output -raw mlflow_database_credentials | jq -r '.username')" >> "$GITHUB_ENV"
          echo "MLFLOW_DB_PASSWORD=$(terraform output -raw mlflow_database_credentials | jq -r '.password')" >> "$GITHUB_ENV"
          echo "ARTIFACT_BUCKET_NAME=$artifact_bucket_name" >> "$GITHUB_ENV"
          echo "TRACKING_URI=http://127.0.0.1:5000" >> "$GITHUB_ENV"
          echo "REFERENCE_DATA_KEY_PATH=/reference" >> "$GITHUB_ENV"
          echo "DATA_PATH=../../data" >> "$GITHUB_ENV"
          echo "ECR_REPO_URI=$ecr_repo_uri" >> "$GITHUB_ENV"
          echo "EC2_PUBLIC_IP=$ec2_public_ip" >> "$GITHUB_ENV"
          echo "EC2_PRIVATE_KEY_PATH_ENCODED=$ec2_private_key_path_encoded" >> "$GITHUB_ENV" # Base64 encoded

      # Build Docker images
      - name: Build Docker Images
        run: |
          docker build --no-cache \
          --build-arg MLFLOW_DB_ENDPOINT="$MLFLOW_DB_ENDPOINT" \
          --build-arg MLFLOW_DB_NAME="$MLFLOW_DB_NAME" \
          --build-arg MLFLOW_DB_USERNAME="$MLFLOW_DB_USERNAME" \
          --build-arg MLFLOW_DB_PASSWORD="$MLFLOW_DB_PASSWORD" \
          --build-arg ARTIFACT_BUCKET_NAME="$ARTIFACT_BUCKET_NAME" \
          --build-arg AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          --build-arg KAGGLE_USERNAME="${{ secrets.KAGGLE_USERNAME }}" \
          --build-arg KAGGLE_API_KEY="${{ secrets.KAGGLE_API_KEY }}" \
          --tag mlflow-server:latest ./src/pipelines

          docker build -t fastapi_app:latest ./fastapi_backend
          docker build -t streamlit_app:latest ./streamlit_frontend
          docker build -t detect_drift:latest ./orchestration

      # Push Docker Images to ECR
      - name: Push Docker Image to ECR
        run: |
          echo "ECR Repository URI: $ECR_REPO_URI"
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin $ECR_REPO_URI
          # Tag and push each Docker image to ECR
          for image_name in fastapi_app streamlit_app detect_drift mlflow-server; do
            docker tag $image_name:latest $ECR_REPO_URI/$image_name:latest
            docker push $ECR_REPO_URI/$image_name:latest
          done


  deploy:
    needs: build-push
    runs-on: ubuntu-latest
    steps:
      # Deployment steps
      - name: Clone Repository to EC2 and Start Containers
        run: |
          # Decode the base64 encoded private key for use
          echo "$EC2_PRIVATE_KEY_PATH_ENCODED" | base64 -d > ec2_private_key.pem

          # Set permissions for the private key file
          chmod 400 ec2_private_key.pem

          # SSH into the EC2 instance and pull images
          ssh -i ec2_private_key.pem ec2-user@$EC2_PUBLIC_IP "aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin $ECR_REPO_URI && docker pull $ECR_REPO_URI:latest"

          # SSH into the EC2 instance and start containers
          ssh -i ec2_private_key.pem ec2-user@$EC2_PUBLIC_IP 'cd /home/ec2-user/app && docker-compose up -d'
          echo "EC2 Public IP: $EC2_PUBLIC_IP"
